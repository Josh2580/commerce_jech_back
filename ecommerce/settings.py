"""
Django settings for ecommerce project.

Generated by 'django-admin startproject' using Django 5.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
import os
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('MY_SECRET_KEY')
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["alb-1442527775.us-east-1.elb.amazonaws.com", "127.0.0.1", "commerceview.netlify.app"]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    #
    "corsheaders",
    'rest_framework',
    'rest_framework_simplejwt',
    'storages',
    #
    'users',
    'loyalty',
    'notifications',
    'orders',
    'payments',
    'products',
    'reviews',
    'cart',
    'stores',
    'categories',


]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    "corsheaders.middleware.CorsMiddleware",
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'ecommerce.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ecommerce.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases


# DATABASES settings
# if os.getenv('DJANGO_ENV') == 'production':
    # AWS RDS Configuration
DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.getenv('MY_DATABASE_NAME'),  # RDS database name
            'USER': os.getenv('MY_DATABASE_USER'),  # RDS database user
            'PASSWORD': os.getenv('MY_DATABASE_PASSWORD'),  # RDS database password
            'HOST': os.getenv('MY_DATABASE_HOST'),  # RDS instance endpoint
            'PORT': os.getenv('MY_DATABASE_PORT'),  # Default PostgreSQL port
        }
    }
# else:
    # Local Development Configuration
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

# STATIC_URL = '/static/'

# # Define the directory where Django will collect static files
# STATICFILES_DIRS = [os.path.join(BASE_DIR, "static")]

# # Media files (User-uploaded content like images)
# MEDIA_URL = '/media/'
# MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

### ADDED FROM FOR AWS BUCKET
### ADDED FROM FOR AWS BUCKET
### ADDED FROM FOR AWS BUCKET

# Load environment variables from .env file
load_dotenv()

# AWS Settings
MY_AWS_ACCESS_KEY_ID = os.getenv('MY_AWS_ACCESS_KEY_ID')
MY_AWS_SECRET_ACCESS_KEY = os.getenv('MY_AWS_SECRET_ACCESS_KEY')
MY_AWS_STORAGE_BUCKET_NAME = os.getenv('MY_AWS_STORAGE_BUCKET_NAME')
MY_AWS_REGION = os.getenv('MY_AWS_REGION')  # Default region
AWS_S3_CUSTOM_DOMAIN = f'{MY_AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com'
AWS_S3_OBJECT_PARAMETERS = {
    'CacheControl': 'max-age=86400',
}

STORAGES = {
    "default": {
        "BACKEND": "storages.backends.s3.S3Storage",
        "OPTIONS": {
            "access_key":MY_AWS_ACCESS_KEY_ID,
            "secret_key":MY_AWS_SECRET_ACCESS_KEY,
            "bucket_name":MY_AWS_STORAGE_BUCKET_NAME,
            "file_overwrite":False,
            "region_name":MY_AWS_REGION
        },
    },
    "staticfiles": {
        "BACKEND": "storages.backends.s3.S3Storage",
        "OPTIONS": {
            "access_key":MY_AWS_ACCESS_KEY_ID,
            "secret_key":MY_AWS_SECRET_ACCESS_KEY,
            "bucket_name":MY_AWS_STORAGE_BUCKET_NAME,
            "file_overwrite":False,
            "region_name":MY_AWS_REGION
        },
    },
}

# Static files (CSS, JavaScript, Images)
STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
STATIC_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/static/'

# Media files
DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
MEDIA_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/media/'

# Additional settings for file storage
AWS_DEFAULT_ACL = None  # Disable default permissions for uploaded files


### ADDED STOP FOR AWS BUCKET
### ADDED STOP FOR AWS BUCKET
### ADDED STOP FOR AWS BUCKET






# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

###  Added 
###  Added 
###  Added 

AUTH_USER_MODEL = 'users.User'

REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'PAGE_SIZE': 4,

    
    'DEFAULT_AUTHENTICATION_CLASSES': (
        
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    )
    
}


CORS_ALLOWED_ORIGINS = [
    "http://localhost:5173"
]

# Session will expire after 1 week (604800 seconds)
SESSION_COOKIE_AGE = 604800  

# Session will not expire when the browser is closed
SESSION_EXPIRE_AT_BROWSER_CLOSE = False



###  Change this before deploying 
###  In other to configure live email verification services
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

SIMPLE_JWT = {
    # "ACCESS_TOKEN_LIFETIME": timedelta(minutes=5),
    "ACCESS_TOKEN_LIFETIME": timedelta(days=5),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
    "ROTATE_REFRESH_TOKENS": False,
    "BLACKLIST_AFTER_ROTATION": False,
    "UPDATE_LAST_LOGIN": False,
}


