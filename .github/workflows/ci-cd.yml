name: Server Pipeline

on:
  push:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      MY_SECRET_KEY: ${{ secrets.MY_SECRET_KEY }}
      MY_DATABASE_NAME: ${{ secrets.MY_DATABASE_NAME }}
      MY_DATABASE_USER: ${{ secrets.MY_DATABASE_USER }}
      MY_DATABASE_PASSWORD: ${{ secrets.MY_DATABASE_PASSWORD }}
      MY_DATABASE_HOST: ${{ secrets.MY_DATABASE_HOST }}
      MY_DATABASE_PORT: ${{ secrets.MY_DATABASE_PORT }}

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.12"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Build and push Docker image
        run: |
          docker build -t my-backend-app .
          docker tag my-backend-app:latest ${{ secrets.ECR_REPOSITORY_URI }}
          docker push ${{ secrets.ECR_REPOSITORY_URI }}

      - name: Update ECS Service
        run: |
          aws ecs update-service --cluster ${{ secrets.ECS_CLUSTER_NAME }} --service ${{ secrets.ECS_BACKEND_SERVICE_NAME }} --force-new-deployment

      # # Optional: Run database migrations and collect static files on ECS
      # - name: Run database migrations and collect static files
      #   run: |
      #     TASK_ARN=$(aws ecs list-tasks --cluster ${{ secrets.ECS_CLUSTER_NAME }} --service-name ${{ secrets.ECS_BACKEND_SERVICE_NAME }} --desired-status RUNNING --query "taskArns[0]" --output text)

      #     if [ "$TASK_ARN" != "None" ] && [ -n "$TASK_ARN" ]; then
      #       echo "Executing command on task: $TASK_ARN"
      #       aws ecs execute-command \
      #         --cluster ${{ secrets.ECS_CLUSTER_NAME }} \
      #         --task "$TASK_ARN" \
      #         --container my-backend-container \
      #         --interactive \
      #         --command "python manage.py migrate && python manage.py collectstatic --noinput"
      #     else
      #       echo "No running tasks found for service ${{ secrets.ECS_BACKEND_SERVICE_NAME }}"
      #     fi
